name: Update TacoTruck Formula

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'TacoTruck version to update to (e.g., 1.0.0-beta.27)'
        required: false
        type: string
      auto_merge:
        description: 'Automatically merge the PR after creation'
        required: false
        default: true
        type: boolean

jobs:
  update-formula:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Get latest release version
        id: get-version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
            echo "Using provided version: $VERSION"
          else
            echo "Fetching latest release version from testfiesta/tacotruck..."
            
            # First try to get the latest stable release
            VERSION=$(curl -s https://api.github.com/repos/testfiesta/tacotruck/releases/latest | jq -r '.tag_name' | sed 's/^v//')
            
            if [ "$VERSION" = "null" ] || [ -z "$VERSION" ]; then
              echo "No stable release found, checking for pre-releases..."
              
              # Get the latest release (including pre-releases)
              VERSION=$(curl -s https://api.github.com/repos/testfiesta/tacotruck/releases | jq -r '.[0].tag_name' | sed 's/^v//')
              
              if [ "$VERSION" = "null" ] || [ -z "$VERSION" ]; then
                echo "Failed to fetch any release version"
                exit 1
              fi
              
              echo "Latest pre-release version found: $VERSION"
            else
              echo "Latest stable release version found: $VERSION"
            fi
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check if version already exists in formula
        id: check-version
        run: |
          CURRENT_VERSION=$(grep 'version "' Formula/tacotruck.rb | sed 's/.*version "\(.*\)".*/\1/')
          echo "Current formula version: $CURRENT_VERSION"
          echo "Target version: ${{ steps.get-version.outputs.version }}"
          
          if [ "$CURRENT_VERSION" = "${{ steps.get-version.outputs.version }}" ]; then
            echo "Formula is already up to date with version $CURRENT_VERSION"
            echo "needs_update=false" >> $GITHUB_OUTPUT
          else
            echo "Formula needs update from $CURRENT_VERSION to ${{ steps.get-version.outputs.version }}"
            echo "needs_update=true" >> $GITHUB_OUTPUT
          fi

      - name: Configure Git
        if: steps.check-version.outputs.needs_update == 'true'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Create update branch
        if: steps.check-version.outputs.needs_update == 'true'
        run: |
          BRANCH_NAME="update-tacotruck-${{ steps.get-version.outputs.version }}"
          echo "Creating branch: $BRANCH_NAME"
          git checkout -b "$BRANCH_NAME"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Update formula
        if: steps.check-version.outputs.needs_update == 'true'
        run: |
          echo "Running update script..."
          ./scripts/update-formula.sh "${{ steps.get-version.outputs.version }}"

      - name: Verify formula syntax
        if: steps.check-version.outputs.needs_update == 'true'
        run: |
          echo "Verifying formula syntax..."
          # Basic syntax check - ensure the file is valid Ruby
          ruby -c Formula/tacotruck.rb
          
          # Check that version was updated correctly
          UPDATED_VERSION=$(grep 'version "' Formula/tacotruck.rb | sed 's/.*version "\(.*\)".*/\1/')
          if [ "$UPDATED_VERSION" != "${{ steps.get-version.outputs.version }}" ]; then
            echo "Error: Version was not updated correctly"
            echo "Expected: ${{ steps.get-version.outputs.version }}"
            echo "Found: $UPDATED_VERSION"
            exit 1
          fi
          echo "Formula syntax is valid and version is correct"

      - name: Commit changes
        if: steps.check-version.outputs.needs_update == 'true'
        run: |
          git add Formula/tacotruck.rb
          git commit -m "Update TacoTruck to version ${{ steps.get-version.outputs.version }}

          - Updated version to ${{ steps.get-version.outputs.version }}
          - Updated download URLs for all platforms
          - Updated SHA256 checksums for all binaries
          
          Auto-generated by GitHub Actions"

      - name: Push branch
        if: steps.check-version.outputs.needs_update == 'true'
        run: |
          git push origin "${{ env.branch_name }}"

      - name: Create Pull Request
        if: steps.check-version.outputs.needs_update == 'true'
        id: create-pr
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Update TacoTruck to version ${{ steps.get-version.outputs.version }}`,
              head: '${{ env.branch_name }}',
              base: 'main',
              body: `## üöÄ TacoTruck Version Update

            This PR updates the TacoTruck Homebrew formula to version **${{ steps.get-version.outputs.version }}**.

            ### Changes Made:
            - ‚úÖ Updated version to \`${{ steps.get-version.outputs.version }}\`
            - ‚úÖ Updated download URLs for all supported platforms
            - ‚úÖ Updated SHA256 checksums for all binaries
            - ‚úÖ Verified formula syntax

            ### Supported Platforms:
            - macOS (Intel x64)
            - macOS (Apple Silicon ARM64)  
            - Linux (Intel x64)
            - Linux (ARM64)

            ### Testing:
            The formula has been automatically validated for syntax correctness.

            ---
            *This PR was automatically created by GitHub Actions*`
            });
            
            console.log(`Created PR #${pr.number}: ${pr.html_url}`);
            return pr.number;

      - name: Auto-merge Pull Request
        if: steps.check-version.outputs.needs_update == 'true' && github.event.inputs.auto_merge == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ steps.create-pr.outputs.result }};
            
            // Wait a moment for PR to be fully created
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            try {
              // Enable auto-merge with squash
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                merge_method: 'squash',
                commit_title: `Update TacoTruck to version ${{ steps.get-version.outputs.version }}`,
                commit_message: `Update TacoTruck Homebrew formula to version ${{ steps.get-version.outputs.version }}

            - Updated version to ${{ steps.get-version.outputs.version }}
            - Updated download URLs for all platforms  
            - Updated SHA256 checksums for all binaries

            Auto-merged by GitHub Actions`
              });
              
              console.log(`Successfully merged PR #${prNumber}`);
              
              // Clean up the branch
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `heads/${{ env.branch_name }}`
              });
              
              console.log(`Deleted branch ${{ env.branch_name }}`);
              
            } catch (error) {
              console.log(`Failed to auto-merge PR #${prNumber}: ${error.message}`);
              console.log('PR created successfully but requires manual merge');
            }

      - name: Summary
        if: always()
        run: |
          if [ "${{ steps.check-version.outputs.needs_update }}" = "false" ]; then
            echo "‚úÖ Formula is already up to date with version ${{ steps.get-version.outputs.version }}"
          elif [ "${{ steps.create-pr.outputs.result }}" ]; then
            echo "‚úÖ Successfully created PR #${{ steps.create-pr.outputs.result }} for TacoTruck version ${{ steps.get-version.outputs.version }}"
            if [ "${{ github.event.inputs.auto_merge }}" = "true" ]; then
              echo "üîÑ Auto-merge was attempted"
            else
              echo "‚è≥ PR requires manual review and merge"
            fi
          else
            echo "‚ùå Failed to update formula"
            exit 1
          fi
